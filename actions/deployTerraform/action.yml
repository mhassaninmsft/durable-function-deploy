name: 'deploy Terraform'
description: 'deploy Terraform '
inputs:
# TODO: In case there are needs for different environments to use different service principals, make those environment variables parameters
# TODO: to this script
  # ARM_CLIENT_ID:  # id of input
  #   description: 'SP client Id'
  #   required: true
  #   default: 'World'
  # ARM_CLIENT_SECRET:  # id of input
  #   description: 'Sp Client Secret'
  #   required: true
  #   default: 'World'
  # ARM_SUBSCRIPTION_ID:  # id of input
  #   description: 'Subscription Id'
  #   required: true
  #   default: 'World'
  # ARM_TENANT_ID:  # id of input
  #   description: 'Tenant Id'
  #   required: true
  #   default: 'World'
  # TFVARS_CONTENT:  # id of input
  #   description: 'Who to greet'
  #   required: true
  GITHUB_TOKEN:  # id of input
    description: 'Who to greet'
    required: true
  ENVIRONMENT:  # id of input
    description: 'Who to greet'
    required: true
    default: 'local'
  TERRAFORM_DIR:
    description: 'Directory where terraform lives'
    required: true
outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-number }}
  function-name:
    description: "Azure Function name"
    value: ${{ steps.terraform-output.outputs.function-name }}
runs:
  using: "composite"
  steps:
    - id: random-number-generator
      run: echo "::set-output name=random-number::$(echo $RANDOM)"
      shell: bash

    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      # with:
      #   # terraform_version: 0.13.0:
      #   cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: 'Create env file'
      working-directory: ${{inputs.TERRAFORM_DIR}}
      shell: bash
      run: |
          touch backend.tfvars
          echo storage_account_name = "infrastorage12" >> backend.tfvars
          echo container_name="terraform" >> backend.tfvars
          echo key = "local123.tfstate" >> backend.tfvars
          echo resource_group_name = "obfuscaion-project-mohamed" >> backend.tfvars
          echo subscription_id = "aa27a1b3-530a-4637-a1e6-6855033a65e5" >> backend.tfvars
          echo tenant_id = "16b3c013-d300-468d-ac64-7eda0820b6d3" >> backend.tfvars
          cat backend.tfvars

#TODO: investigate below errors
## errors out due to:  https://github.com/hashicorp/terraform/issues/31543
    # - name: Terraform Format
    #   shell: bash
    #   working-directory: ./deploy/terraform
    #   id: fmt
    #   run: terraform fmt -check

    - name: Terraform Init
      shell: bash
      working-directory: ${{inputs.TERRAFORM_DIR}}
      id: init
      run: terraform init --backend-config=backend.tfvars

    - name: Terraform Validate
      shell: bash
      working-directory: ${{inputs.TERRAFORM_DIR}}
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      shell: bash
      working-directory: ${{inputs.TERRAFORM_DIR}}
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan --var "environment=${{inputs.ENVIRONMENT}}" -no-color -input=false
      continue-on-error: true

    - name: Comment on PR with terraform plan output
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ inputs.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      shell: bash
      working-directory: ${{inputs.TERRAFORM_DIR}}
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      shell: bash
      working-directory: ${{inputs.TERRAFORM_DIR}}
      # if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      if: github.event_name == 'push'
      run: terraform apply --var "environment=${{inputs.ENVIRONMENT}}" -auto-approve -input=false

    - name: Terraform output
      id: terraform-output
      shell: bash
      working-directory: ${{inputs.TERRAFORM_DIR}}
      if: github.event_name == 'push'
      run: |
        FUNCTION_NAME=$(terraform output function_name)
        echo "::set-output name=function-name::$(echo $FUNCTION_NAME)"
        echo "Function name is ${FUNCTION_NAME}"